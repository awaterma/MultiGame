/*
* Copyright (C) 2008 ECOSUR, Andrew Waterman and Max Pimm
* 
* Licensed under the Academic Free License v. 3.0. 
* http://www.opensource.org/licenses/afl-3.0.php
*/

/*
 * This rule package creates a strategic, "Blocker" player.
 *
 * A "blocker" player is a player that seeks always to block any possible
 * winning moves of his opponents.  The blocker strategy is first to see if
 * there are any scoring moves for the opposite team available, and if so,
 * to place a token in that location.  Scoring moves are ranked by there 
 * ability to win the game, and the highest scored location is used by the
 * blocker as its next move. 
 *
 * If no scoring moves are found, the blocker agent chooses the next available
 * cell adjacent to the opposition team, and if no such cell is found, the 
 * next available cell to his team.
 *
 * @author awaterma@ecosur.mx
*/

package mx.ecosur.multigame.pente.strategy;

import mx.ecosur.multigame.Color;
import mx.ecosur.multigame.GameState;
import mx.ecosur.multigame.ejb.entity.Cell;
import mx.ecosur.multigame.ejb.entity.GameGrid;
import mx.ecosur.multigame.ejb.entity.pente.PenteGame;
import mx.ecosur.multigame.ejb.entity.pente.PenteMove;
import mx.ecosur.multigame.ejb.entity.pente.StrategyPlayer;

import java.util.HashSet;
import java.util.TreeSet;
import java.util.Random;
import java.util.TreeSet;

#Yellow must move first, and that move can only be at the center of the board
rule "first-move"
when
    game   : PenteGame (state == GameState.PLAY, $grid : grid)
    player : StrategyPlayer (turn == true, color == Color.YELLOW)
    eval ($grid.getCells().isEmpty())
then
    PenteMove centerMove = new PenteMove (player, new Cell (
        game.getRows() / 2, game.getColumns () / 2, player.getColor()));
    modify (player) { setNextMove (centerMove) }
end

rule "blocker-move"
when
    game   : PenteGame (state == GameState.PLAY, $grid : grid)
    player : StrategyPlayer (turn == true, nextMove == null)
    eval (!$grid.getCells().isEmpty())
then
    HashSet<Color> colors = new HashSet<Color>();
    TreeSet<PenteMove> scoringMoves = player.determineScoringMoves(player.oppositionColors());
    PenteMove nextMove = null;
    if (scoringMoves.size() > 0) {
        for (PenteMove move : scoringMoves) {
            Cell destination = move.getDestination();
            destination.setColor(player.getColor());
            nextMove = new PenteMove (player, destination);
            break;
        }
    }
    else {
        # Use the random algorithm 
        TreeSet<PenteMove> possible = player.determineAvailableMoves();
        if (possible.size() == 0) 
            possible = player.determineAvailableMoves (player.oppositionColors());
        PenteMove destination = null;
        Random random = new Random ();
        for (PenteMove move : possible) {
            if (random.nextBoolean()) { 
                destination = move; 
                break;
            }
        }
        if (destination == null)
            for (PenteMove move : possible) {
                destination = move;
                break;
             }
        }
    modify (player) { setNextMove (nextMove) }
end