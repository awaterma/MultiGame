package mx.ecosur.multigame.pente;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import mx.ecosur.multigame.GameGrid;
import mx.ecosur.multigame.Cell;
import mx.ecosur.multigame.Color;
import mx.ecosur.multigame.GameGrid;
import mx.ecosur.multigame.GameState;

import mx.ecosur.multigame.ejb.entity.Game;
import mx.ecosur.multigame.ejb.entity.Move;
import mx.ecosur.multigame.ejb.entity.Move.*;


import mx.ecosur.multigame.ejb.entity.Player;
import mx.ecosur.multigame.ejb.entity.pente.PenteGame;
import mx.ecosur.multigame.ejb.entity.pente.PentePlayer;
import mx.ecosur.multigame.ejb.entity.pente.PenteMove;


#functions for the Game of PENTE

/*
    Determines if the destination of the requested move
    is in the center of the grid.
*/
function boolean isCenter (Game game, Move move) {
    Dimension size = game.getSize();
    Cell destination = move.getDestination ();
    
    int centerWidth = (int) size.getWidth()/2;
    int centerHeight = (int) size.getHeight()/2;
    
    boolean ret = (destination.getRow () == centerHeight && 
        destination.getColumn() == centerWidth);
    if (!ret)
        move.setStatus (Status.INVALID);
    return ret;
}

/*
    Determines if the destination of the requested move is
    empty on the grid.
*/
function boolean isEmpty (GameGrid grid, Move move) {
    Cell destination = move.getDestination();
    Cell current = grid.getLocation (destination.getRow(), destination.getColumn());
    boolean ret = (current == null);
    if (!ret)
        move.setStatus (Status.INVALID);
    return ret;
}

/*
    Determines if the move captures any two pieces of an opponent's color
    in any direction.
*/
function boolean isCapture (PenteGame game, PenteMove move) {
    List<Player> players = game.getPlayers();
    ArrayList<Color> colors = new ArrayList<Color>();
    for (Player p : players) {
        if (p.equals (move.getPlayer()))
            continue;
        colors.add(p.getColor());
    }
    
    Set<Cell> captures = move.getCaptures((Color []) colors.toArray());
    return (captures.size() > 0);
}


/*
    Removes the set of tokens that have been captured by a 
    specific move.
*/

function GameGrid removeCaptures (PenteGame game, PenteMove move) {
    List<Player> players = game.getPlayers();
    ArrayList<Color> colors = new ArrayList<Color>();
    for (Player p : players) {
        if (p.equals (move.getPlayer()))
            continue;
        colors.add(p.getColor());
    }

    GameGrid grid = game.getGrid();
    Set<Cell> captures = move.getCaptures((Color []) colors.toArray());
    for (Cell capture : captures) {
        grid.removeCell (capture);
    }
    return grid;
}


/*
    Determines if the game has a winner.
*/
function boolean hasWinner (PenteGame game) {
    return game.getWinners().size() > 0;
}

/*
    Gets the winner from a specified game.  For more complicated payoff
    schemas, this function should return a PriorityQueue of Players 
    based upon positions on the board.
*/
function PentePlayer getWinner (PenteGame game) {
    SortedSet<Player> winners = (SortedSet<Player>) game.getWinners();
    return (PentePlayer) winners.first();
}


#Rules for the game of PENTE

#Sets the players in the game so that Black has the first turn
#Sets up the empty game grid and sets thate game into the PLAY state
rule "setup"
    agenda-group "initialize"
when
    game : Game (state == GameState.BEGIN)
then
    List<Player> players = game.getPlayers();
    for (Player p : players) {
        if (p.getColor() == Color.BLACK)
            p.setTurn(true);
        else
            p.setTurn(false);
    }
    GameGrid grid = new GameGrid ();
    modify (game) { setGrid (grid), setState (GameState.PLAY), setPlayers (players) } 
end

#Black must move first, and that move can only be at the center of the board
rule "evaluate-first-move"
    agenda-group "verify"
when
    game  : Game (state == GameState.PLAY, $grid : grid)
    move  : Move (status == Status.UNVERIFIED, player.turn == true, player.color == Color.BLACK)
    eval ($grid.getCells().isEmpty())
    eval (isCenter (game, move))    
then
    modify (move) { setStatus (Status.VERIFIED) }
end

#Subsequent moves must occur on a non-empty board, on empty locations
rule "evaluate-move"
    agenda-group "verify"
when
    game  : Game (state == GameState.PLAY, $grid : grid)
    move  : Move (status == Status.UNVERIFIED, player.turn == true)
    eval (!$grid.getCells().isEmpty())
    eval (isEmpty (game.getGrid(), move))   
then
    modify (move) { setStatus (Status.VERIFIED) }
end   

# Executes a simple move
rule "execute-move"
    agenda-group "move"
when 
    game  : Game (state == GameState.PLAY)
    move  : Move (player.turn == true, status == Status.VERIFIED)  
then 
    GameGrid modifiedGrid = game.getGrid();   
    modifiedGrid.updateCell (move.getDestination());
    modify (move) { setStatus (Status.MOVED) }
    modify (game) { setGrid (modifiedGrid) }
end

/*
# Captures any opposition tokens
rule "execute-capture"
    agenda-group "evaluate"
when
    game  : Game (state == GameState.PLAY)
    move  : Move (player.turn == true, status == Status.VERIFIED)
    eval (isCapture ((PenteGame) game, (PenteMove) move))
then  
    GameGrid grid = removeCaptures ((PenteGame) game, (PenteMove) move);
end  

# Finds the winner (currently, there is no payoff schema in place, a game win
# is simply a "win.")
rule "find-the-winner"
    agenda-group "evaluate"
when
    game  : Game (state == GameState.PLAY)
    move  : Move (player.turn == true, status == Status.VERIFIED)
    eval (hasWinner((PenteGame) game))
then
    PentePlayer winner = getWinner ((PenteGame) game);
    winner.setWins (winner.getWins () + 1);
    modify (game) { setState (GameState.END)}
end
*/