# Copyright (C) 2009 ECOSUR, Andrew Waterman
#
# Licensed under the Academic Free License v. 3.2.
# http://www.opensource.org/licenses/afl-3.0.php
 
package mx.ecosur.multigame.impl.entity.manantiales

import java.util.ArrayList;

import mx.ecosur.multigame.impl.Color;
import mx.ecosur.multigame.impl.enums.manantiales.*;
import mx.ecosur.experiment.multigame.solver.manantiales.*;

import org.drools.planner.core.score.constraint.*;
import org.drools.planner.core.score.calculator.*;

global SimpleScoreCalculator scoreCalculator;

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "northern border deforested"
    when
        $tok1 : SolverFicha ($id : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : SolverFicha (id > $id, $id2 : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok3 : SolverFicha (id > $id2, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
    then
        insertLogical (
            new IntConstraintOccurrence("northern border deforested", 5,
                $tok1, $tok2, $tok3));
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "eastern border deforested"
    when
        $tok1 : SolverFicha ($id : id, border == BorderType.EAST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : SolverFicha (id > $id, $id2 : id, border == BorderType.EAST,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))  
        $tok3 : SolverFicha (id > $id2, border == BorderType.EAST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
    then
        insertLogical (
            new IntConstraintOccurrence("eastern border deforested", 5,
                $tok1, $tok2, $tok3)) ;
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "southern border deforested"
    when
        $tok1 : SolverFicha ($id : id, border == BorderType.SOUTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : SolverFicha (id > $id, $id2 : id, border == BorderType.SOUTH,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok3 : SolverFicha (id > $id2, border == BorderType.SOUTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
    then
        insertLogical (
            new IntConstraintOccurrence("southern border deforested", 5,
                $tok1, $tok2, $tok3));
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "western border deforested"
    when
        $tok1 : SolverFicha ($id : id, border == BorderType.WEST, 
        type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : SolverFicha (id > $id, $id2 : id, border == BorderType.WEST,
        type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok3 : SolverFicha (id > $id2, border == BorderType.WEST, 
        type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
    then
        insertLogical (
            new IntConstraintOccurrence("western border deforested", 5,
                $tok1, $tok2, $tok3));
end

# Enforces the constraint (by column) that intensives cannot be contiguous
# (Check to see if the absolut value of the difference between locations is "2",
# due to the number schema in the grid.
rule "column contiguous intensive"
	when
		$tok1 : SolverFicha ($id : id, $column : column, $row : row, type == TokenType.INTENSIVE_PASTURE)
		$tok2 : SolverFicha (id > $id, column == $column, $row2 : row, type == TokenType.INTENSIVE_PASTURE)
		eval (Math.abs($row - $row2) == 2)
	then 
		insertLogical (
		  new IntConstraintOccurrence(
		  "Column contiguous intensive", 10, $tok1, $tok2));
end

# Enforces the constraint (by row) that intensives cannot be contiguous
# (Check to see if the absolut value of the difference between locations is "2",
# due to the number schema in the grid.
rule "row contiguous intensive"
    when
        $tok1 : SolverFicha ($id : id, $row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $tok2 : SolverFicha (id > $id, row == $row, $col2 : column, type == TokenType.INTENSIVE_PASTURE)
        eval (Math.abs ($col - $col2) == 2) 
    then 
        insertLogical (new IntConstraintOccurrence(
          "Row contiguous intensive", 10, $tok1, $tok2));
end

# Enforces the constraint (by diagnal) that intensives cannot be contiguous
rule "diagnal contiguous intensive"
    when
        $tok1 : SolverFicha ($id : id, $col : column, $row : row, type == TokenType.INTENSIVE_PASTURE)
        $tok2 : SolverFicha (id > $id, $col2 : column, $row2 : row, type == TokenType.INTENSIVE_PASTURE)  
        eval (Math.abs($col - $col2) == 1 && Math.abs($row - $row2) == 1)
    then
        insertLogical (new IntConstraintOccurrence(
          "Diagnol contiguous intensive", 10, $tok1, $tok2)); 
end

#Enforces Manantiales constraint (only 2 developments around the manantiales
#may deforest the land).
rule "manantiales"
    when
        $tok1 : SolverFicha ($id : id, manantial == true, type in (
                    TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : SolverFicha (id > $id, $id2 : id, manantial == true, type in (
                    TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE)) 
        $tok3 : SolverFicha (id > $id2, manantial == true, type in (
                    TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))         
    then
        insertLogical (new IntConstraintOccurrence("Column contiguous intensive", 
            10, $tok1, $tok2, $tok3));
end

#Enforces the constaint that no more than 32 sites can be deforested
rule "too many deforested sites"
    when
        $list : Number () from accumulate (
            SolverFicha ($id : id, type in (
                TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
            count ($id)) 
        eval ($list.intValue() > 32)
    then
        insertLogical (new IntConstraintOccurrence("Too many deforested sites", 
            (32 - $list.intValue()), $list));
end  


#Enforce territorial constraints
rule "blue territory worth at least 24 points"
    when
        $total : Number() from accumulate(
            SolverFicha (color == Color.BLUE, $score : score),
            sum($score));           
        eval ($total.intValue() < 24)    
    then
        insertLogical (new UnweightedConstraintOccurrence(
            "Not enough points", $total)); 
end

rule "green territory worth at least 24 points"
    when
        $total : Number() from accumulate(
            SolverFicha (color == Color.GREEN, $score : score),
            sum($score));          
        eval ($total.intValue() < 24)    
    then
        insertLogical (new UnweightedConstraintOccurrence(
            "Not enough points", $total)); 
end

rule "red territory worth at least 24 points"
    when
        $total : Number() from accumulate(
            SolverFicha (color == Color.RED, $score : score),
            sum($score));     
        eval ($total.intValue() < 24)    
    then
        insertLogical (new UnweightedConstraintOccurrence(
            "Not enough points", $total)); 
end

rule "yellow territory worth at least 24 points"
    when
        $total : Number() from accumulate(
            SolverFicha (color == Color.YELLOW, $score : score),
            sum($score));
        eval ($total.intValue() < 24)
    then
        insertLogical (new UnweightedConstraintOccurrence(
            "Not enough points", $total)); 
end


#Constraint calculator update
rule "constraintsBroken"
    salience -50 
    when
        $hardCount : Number() from accumulate(
            IntConstraintOccurrence(
                constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
                    sum($weight))
        $softCount : Number() from accumulate(
            $unweightedConstraintOccurrence : UnweightedConstraintOccurrence(),
            count($unweightedConstraintOccurrence)
            )
    then
        int total = $softCount.intValue() + $hardCount.intValue();
        scoreCalculator.setScore(- total);
end
