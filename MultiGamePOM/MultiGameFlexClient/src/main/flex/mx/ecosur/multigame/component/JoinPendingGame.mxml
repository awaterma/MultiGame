<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" title="Join pending game" creationComplete="init(event)">

    <mx:Metadata>
        [Event(name="gameJoined", type="mx.ecosur.multigame.event.GamePlayerEvent")]
    </mx:Metadata>

    <mx:Script> 
        <![CDATA[
            import flash.events.MouseEvent;
        
            import mx.ecosur.multigame.enum.GameState;    
            import mx.ecosur.multigame.enum.GameEvent;
            import mx.ecosur.multigame.event.GamePlayerEvent;
            import mx.ecosur.multigame.entity.Player;
            import mx.ecosur.multigame.entity.GamePlayer;
            import mx.ecosur.multigame.entity.Game;
            import mx.ecosur.multigame.enum.Color;
            import mx.ecosur.multigame.enum.PenteStrategy;

            import mx.formatters.DateFormatter;
            import mx.collections.ArrayCollection;
            import mx.rpc.AsyncToken;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;    
            import mx.controls.Alert;            
            import mx.utils.StringUtil;
            
            public var player:Player;
            private var _games:ArrayCollection;
            
            public function init(event:Event):void{
            	var token:AsyncToken = gameService.getPendingGames(player);
            	token.resultHandler = updateResultHandler;
            	token.faultHandler = updateFaultHandler;
            }
            
            public function reload(event:Event):void {
                var token:AsyncToken = gameService.getPendingGames(player);
                token.resultHandler = updateResultHandler;
                token.faultHandler = updateFaultHandler;
            }
            
            private function updateResultHandler(event:ResultEvent):void{
                _games = ArrayCollection(event.result);
                updateDataGrid();
            }   
                        
            private function updateFaultHandler(event:FaultEvent):void{
                Alert.show(event.fault.faultString, "Error getting pending games!");
            }
            
            
            private function joinResultHandler(event:ResultEvent):void{
            	var gamePlayer:GamePlayer = GamePlayer(event.result);
                dispatchEvent(new GamePlayerEvent("gameJoined", gamePlayer));
            }
            
            private function joinFaultHandler(event:FaultEvent):void{
            	Alert.show(event.fault.faultString, "Error joining pending game!");
            }
            
            private function updateDataGrid():void{
                var game:Game;
                var gamePlayer:GamePlayer;
                var dataProvider:ArrayCollection = new ArrayCollection();
                var dataItem:Object;
                var df:DateFormatter = new DateFormatter();
                df.formatString = "DD/MM/YYYY H:NN";
                for (var i:Number = 0; i < _games.length; i++){
                    game = Game(_games.getItemAt(i));
                    dataItem = new Object();
                    dataItem.gameType = game.type;
                    dataItem.created = df.format(game.created);
                    dataItem.players = "";
                    for (var j:Number = 0; j < game.players.length; j++){
                        gamePlayer = GamePlayer(game.players[j]);
                        dataItem.players += gamePlayer.player.name + " (" + gamePlayer.color + "), ";
                    }
                    if(dataItem.players.length > 2){
                        dataItem.players = dataItem.players.substring(0, dataItem.players.length - 2);
                    }
                    dataItem.status = GameState.getDescription(game.state);
                    dataProvider.addItem(dataItem);
                }
                gamesDataGrid.dataProvider = dataProvider;
            }
            
            private function joinPending():void{
                var game:Game = Game(_games.getItemAt(gamesDataGrid.selectedIndex));
                var pendingToken:AsyncToken = gameService.joinPendingGame(game, player, Color.UNKNOWN);
                pendingToken.resultHandler = joinResultHandler;
                pendingToken.faultHandler = joinFaultHandler;
            }
            
        ]]>
    </mx:Script>
    
    <mx:RemoteObject id="gameService" destination="gameService" 
    	result="event.token.resultHandler(event)" fault="event.token.faultHandler(event)"/>

    <mx:VBox width="100%">
        <mx:DataGrid id="gamesDataGrid" width="100%" rowCount="3" minWidth="700">
            <mx:columns>
                <mx:DataGridColumn headerText="Started" dataField="created" width="120"/>
                <mx:DataGridColumn headerText="Game type" dataField="gameType" width="80"/>
                <mx:DataGridColumn headerText="Players" dataField="players" wordWrap="true" />
                <mx:DataGridColumn headerText="Status" dataField="status" width="120" wordWrap="true"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:ControlBar horizontalAlign="right" width="100%">
            <mx:Button id="pendingBtn" label="Join" click="joinPending()" />
        </mx:ControlBar>
    </mx:VBox>
    
</mx:Panel>
