#created on: Feb 4, 2009f
package mx.ecosur.multigame.manantiales

import mx.ecosur.multigame.MessageSender;

import mx.ecosur.multigame.enums.GameState;
import mx.ecosur.multigame.enums.MoveStatus;

import mx.ecosur.multigame.model.Condition;
import mx.ecosur.multigame.model.Game;
import mx.ecosur.multigame.model.Move;

import mx.ecosur.multigame.impl.Color;

import mx.ecosur.multigame.impl.model.GridCell;
import mx.ecosur.multigame.impl.model.GameGrid;
import mx.ecosur.multigame.impl.model.GridGame;
import mx.ecosur.multigame.impl.model.GridMove;
import mx.ecosur.multigame.impl.model.GridPlayer;

import mx.ecosur.multigame.impl.entity.manantiales.CheckCondition;
import mx.ecosur.multigame.impl.entity.manantiales.Ficha;
import mx.ecosur.multigame.impl.entity.manantiales.ManantialesGame;
import mx.ecosur.multigame.impl.entity.manantiales.ManantialesMove;
import mx.ecosur.multigame.impl.entity.manantiales.ManantialesPlayer;

import mx.ecosur.multigame.impl.enums.manantiales.BorderType;
import mx.ecosur.multigame.impl.enums.manantiales.ConditionType;
import mx.ecosur.multigame.impl.enums.manantiales.Mode;
import mx.ecosur.multigame.impl.enums.manantiales.TokenType;

import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;


function boolean isValid (GameGrid grid, ManantialesMove move) {
    boolean ret = false;
    if (move.getDestination() != null) {
	    Ficha destination = (Ficha) move.getDestination();
	    Ficha current = (Ficha) grid.getLocation (destination);
	    if (current != null) {
	       switch (current.getType()) {
	           case MANAGED_FOREST:
	               ret = !destination.getType().equals(TokenType.SILVOPASTORAL) &&
	                   !destination.getType().equals(TokenType.INTENSIVE_PASTURE);
	               break;
	           case MODERATE_PASTURE:
                   ret = !destination.getType().equals(TokenType.SILVOPASTORAL);
                   break;               
	           case VIVERO:
	               ret = !destination.getType().equals(TokenType.INTENSIVE_PASTURE);
	               break;
	           case SILVOPASTORAL:
	               ret = true;
	                break;
	           default:
	               ret = false;
	               break;
	       }
	    } else {
	       ret = true;
	    }
	}
	
    if (!ret) {
        move.setStatus (MoveStatus.INVALID);            
    }
    
    return ret;
}

function int score (ManantialesPlayer player, ManantialesMove move) {
    switch (move.getType()) {
        case MANAGED_FOREST:
            player.setForested(player.getForested() +  1);
            break;
        case MODERATE_PASTURE:
            player.setModerate(player.getModerate() + 1);
            break;
        case INTENSIVE_PASTURE:
            player.setIntensive(player.getIntensive() + 1);
            break;
        case VIVERO:
            player.setVivero(player.getVivero() + 1);
            break;
        case SILVOPASTORAL:
            player.setSilvo(player.getSilvo() + 1);
            break;    
        default:
            break;
    }
    
    /* Set the points */
    int forested = player.getForested() * 1;
    int moderate = player.getModerate() * 2;
    int intensive = player.getIntensive() * 3;
    int silvo = player.getSilvo() * 4;
    
    return forested + moderate + intensive + silvo;
}

function boolean isWinner (Mode mode, ManantialesPlayer gamePlayer) {
    ManantialesPlayer player = (ManantialesPlayer) gamePlayer;
    return player.getScore() >= mode.getWinningScore();
}

function boolean isBorder (GridCell cell) {
    return (cell.getColumn () == 4 || cell.getRow () == 4);       
}

function GridPlayer incrementTurn (GridMove move) {
    GridPlayer player = move.getPlayer();    
    player.setTurn(false);
    ManantialesGame game = (ManantialesGame) player.getGame();

    /* Find next player */
    List<GridPlayer> players = game.getPlayers();
    int playerNumber = players.indexOf(player);
    GridPlayer nextPlayer = null;
    if (playerNumber == players.size() - 1) {
        nextPlayer = players.get(0);
    } else {
        nextPlayer = players.get(playerNumber + 1);
    }
    
    nextPlayer.setTurn (true);
    return nextPlayer;
}

function boolean isPrecedingPlayer (GridPlayer first, GridPlayer second) {
    boolean ret = false;
    if (!first.equals(second)) {
        ManantialesGame game = (ManantialesGame) first.getGame();
        List<GridPlayer> players = game.getPlayers();
        int playerNumber = players.indexOf(first);
	    GridPlayer nextPlayer = null;
	    if (playerNumber == players.size() - 1) {
	        nextPlayer = players.get(0);
	    } else {
	        nextPlayer = players.get(playerNumber + 1);
	    }
	    ret = nextPlayer.equals(second);   
    }
    return ret;    
}


function GameGrid clearPlayer (ManantialesGame game, ManantialesPlayer player) {
    GameGrid grid = game.getGrid();
    
    for (GridCell cell : game.getGrid().getCells()) {
        if (cell.getColor().equals(player.getColor())) 
            grid.removeCell(cell);
    }
    
    return grid;        
}

function GameGrid clearBorder (ManantialesGame game, ConditionType violation) {
    GameGrid ret = game.getGrid();
    HashSet<Ficha> deletions = new HashSet<Ficha>();

    switch (violation) {
        case NORTHERN_BORDER_DEFORESTED:
            for (GridCell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.NORTH))
                    deletions.add(ficha);
            }        
            break;
        case WESTERN_BORDER_DEFORESTED:
            for (GridCell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.WEST))
                    deletions.add(ficha);
            }          
            break;
        case SOUTHERN_BORDER_DEFORESTED:
            for (GridCell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.SOUTH))
                    deletions.add(ficha);
            }          
            break;
        case EASTERN_BORDER_DEFORESTED:
            for (GridCell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.EAST))
                    deletions.add(ficha);
            }          
            break;
    }
    
    for (Ficha ficha : deletions) {
        ret.removeCell(ficha);
    }
    
    return ret;
}

function GameGrid clearTerritory (ManantialesGame game, Color color) {
    GameGrid ret = game.getGrid();
    HashSet<Ficha> deletions = new HashSet<Ficha>();
    
    for (GridCell cell : ret.getCells()) {
        if (cell.getColor().equals(color)) {
            Ficha ficha = (Ficha) cell;
            if (ficha.getType().equals(TokenType.MANAGED_FOREST))
                continue;
            deletions.add(ficha);
        }
    }
    
    for (Ficha ficha : deletions) {
        ret.removeCell (ficha);
    }
    
    return ret;
}

# Sets the mode of the game, based upon its current state.
# TODO: Add in different available game modes (UI has not been
# implemented for PUZZLE modes nor RELOADED yet)le 
function Mode incrementMode (Mode mode) {
    if (mode == null) {
        mode = Mode.CLASSIC;
    } else {
	    switch (mode) {
	        case CLASSIC:
	            mode = Mode.SILVOPASTORAL;
	            break;	             
	    }
    }
    return mode;
}

#Sets the players in the game so that Black has the first turn
rule "setup"
    agenda-group "initialize"
    no-loop true
when
    $game : ManantialesGame (state == GameState.BEGIN);
then
    List<GridPlayer> players = $game.getPlayers();
    for (GridPlayer p : players) {
        if (p.getColor() == Color.YELLOW)
            p.setTurn(true);
        else
            p.setTurn(false);
    }
    GameGrid grid = new GameGrid ();
    Mode mode = incrementMode($game.getMode());
    modify ($game) { setGrid (grid), setState (GameState.PLAY), setPlayers (players), 
        setMode (mode) } 
    Game model = new Game($game);
    MessageSender messageSender = new MessageSender();
    messageSender.sendPlayerChange(model);
    messageSender.sendStartGame(model);
end  


rule "evaluate-move"
    agenda-group "verify"
when
    $game  : GridGame (state == GameState.PLAY, $grid : grid)
    $move  : ManantialesMove (badYear == false, status == MoveStatus.UNVERIFIED, player.turn == true)
    eval (isValid($game.getGrid(), $move))
then
    modify ($move) { setStatus (MoveStatus.VERIFIED) }
end 

rule "intensive-replaces-moderate" 
    agenda-group "verify"
when
    $game : GridGame (state == GameState.PLAY, $grid : grid)
    $move : ManantialesMove (badYear == false, status == MoveStatus.VERIFIED,
        type == TokenType.INTENSIVE_PASTURE, replacementType != TokenType.MODERATE_PASTURE)
then
    modify ($move) { setStatus (MoveStatus.INVALID) }
end 

rule "silvopastoral-replaces-vivero" 
    agenda-group "verify"
when
    $game : GridGame (state == GameState.PLAY, $grid : grid)
    $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID,
        type == TokenType.SILVOPASTORAL, replacementType != TokenType.VIVERO)
then
    modify ($move) { setStatus (MoveStatus.INVALID) }
end    

rule "row contiguous intensive"
    agenda-group "verify"
    no-loop true
when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, destination.row == $row, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (!isBorder($tok1)) or eval (!isBorder($move.getDestination()))           
        eval (Math.abs ($col - $move.getDestination().getColumn()) <= 2) 
    then 
        modify ($move) { setStatus (MoveStatus.INVALID) }
end


rule "column contiguous intensive"
    agenda-group "verify"
    no-loop true
when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, destination.column == $col, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (!isBorder($tok1)) or eval (!isBorder($move.getDestination()))
        eval (Math.abs ($row - $move.getDestination().getRow()) <= 2) 
    then 
        modify ($move) { setStatus (MoveStatus.INVALID) }
end    

rule "border row contiguous intensive"
    agenda-group "verify"
    no-loop true
when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, destination.row == $row, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (isBorder($move.getDestination())) and eval (isBorder($tok1))            
        eval (Math.abs ($col - $move.getDestination().getColumn()) == 1) 
    then 
        modify ($move) { setStatus (MoveStatus.INVALID) }
end


rule "border column contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, destination.column == $col, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (isBorder($move.getDestination())) and eval (isBorder($tok1))
        eval (Math.abs ($row - $move.getDestination().getRow()) == 1) 
    then 
        modify ($move) { setStatus (MoveStatus.INVALID) }
end 

# Enforces the constraint (by diagonal) that intensives cannot be contiguous
rule "diagonal contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($col : column, $row : row, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, $destination : destination, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (Math.abs($row - $destination.getRow()) == 1)
        eval (Math.abs($col - $destination.getColumn()) == 1) 
    then
        modify ($move) { setStatus (MoveStatus.INVALID) }
end 

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "northern border deforested"
    agenda-group "verify"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))   
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, 
            destination.border == BorderType.NORTH, type == TokenType.MODERATE_PASTURE)  
        eval (!$game.hasCondition (ConditionType.NORTHERN_BORDER_DEFORESTED));                         
    then
        CheckCondition constraint = new CheckCondition(
            ConditionType.NORTHERN_BORDER_DEFORESTED, $move.getPlayer(), $tok1, $tok2, 
                (Ficha) $move.getDestination());
        $game.addCheckCondition (constraint);
        GridPlayer player = $move.getPlayer();
        player.setGame($game);
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game ($game), move, condition);
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "eastern border deforested"
    agenda-group "verify"    
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.EAST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.EAST,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))  
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, 
            destination.border == BorderType.EAST, type == TokenType.MODERATE_PASTURE)
        eval (!$game.hasCondition (ConditionType.EASTERN_BORDER_DEFORESTED))       
    then
        CheckCondition constraint = new CheckCondition(
            ConditionType.EASTERN_BORDER_DEFORESTED, $move.getPlayer(), 
            $tok1, $tok2, (Ficha) $move.getDestination());
        $game.addCheckCondition (constraint);
        GridPlayer player = $move.getPlayer();
        player.setGame($game);           
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game ($game), move, condition);              
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "southern border deforested"
    agenda-group "verify"
    no-loop true    
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.SOUTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.SOUTH,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, 
            destination.border == BorderType.SOUTH, type == TokenType.MODERATE_PASTURE) 
        eval (!$game.hasCondition (ConditionType.SOUTHERN_BORDER_DEFORESTED))        
    then
        CheckCondition constraint = new CheckCondition(
            ConditionType.SOUTHERN_BORDER_DEFORESTED, $move.getPlayer(), 
            $tok1, $tok2, (Ficha) $move.getDestination());
        $game.addCheckCondition (constraint);
        GridPlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }                 
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game($game), move, condition);                     
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "western border deforested"
    agenda-group "verify"
    no-loop true    
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.WEST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.WEST,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, 
            destination.border == BorderType.WEST, type == TokenType.MODERATE_PASTURE)   
        eval (!$game.hasCondition (ConditionType.WESTERN_BORDER_DEFORESTED))                                      
    then
        CheckCondition constraint = new CheckCondition(
            ConditionType.WESTERN_BORDER_DEFORESTED, $move.getPlayer(), 
                $tok1, $tok2, (Ficha) $move.getDestination());
        $game.addCheckCondition (constraint);
        GridPlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }             
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game($game), move, condition);                     
end

#Enforces Manantiales constraint (only 2 developments around the manantiales
#may deforest the land).
rule "manantiales"
    agenda-group "verify"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, manantial == true, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, manantial == true, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE)) 
        $move : ManantialesMove (badYear == false, status != MoveStatus.INVALID, 
            destination.manantial == true, type == TokenType.MODERATE_PASTURE)
        eval (!$game.hasCondition (ConditionType.MANANTIALES_DRY))                   
    then 
        CheckCondition constraint = new CheckCondition(
            ConditionType.MANANTIALES_DRY, $move.getPlayer(), $tok1, $tok2,
            (Ficha) $move.getDestination());
        $game.addCheckCondition(constraint);
        $move.getPlayer().setGame($game);        
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game ($game), move, condition);                
end

#Enforces the constaint that no more than 32 sites can be deforested
rule "territory-deforested"
    agenda-group "evaluate"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $move : ManantialesMove (player.turn == true, destination != null, 
            destination.type in (
                TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $list : ArrayList (size > 30) from collect (
            Ficha (type in (
                TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE)))
        eval (!$game.hasCondition (ConditionType.TERRITORY_DEFORESTED))                
    then      
        $list.add($move.getDestination());  
        Ficha [] cells = (Ficha []) $list.toArray(new Ficha [ 0 ]);
        CheckCondition constraint = new CheckCondition(
            ConditionType.TERRITORY_DEFORESTED, $move.getPlayer(), cells);
        $game.addCheckCondition(constraint);
        $move.getPlayer().setGame($game);         
        MessageSender messageSender = new MessageSender ();
        Condition condition = new Condition (constraint);
        Move move = new Move ($move);
        messageSender.sendConditionRaised (new Game($game), move, condition);               
end

# Executes a simple move
rule "execute-move"
    agenda-group "move"
    no-loop true
when 
    $game  : GridGame (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, status == MoveStatus.VERIFIED)  
then
    #Modify gamegrid 
    GameGrid modifiedGrid = $game.getGrid();   
    modifiedGrid.updateCell ((GridCell) $move.getDestination());
    modify ($game) { setGrid (modifiedGrid) }
    modify ($move) { setStatus (MoveStatus.MOVED) }
    MessageSender messageSender = new MessageSender();
    Move model = new Move ($move);
    messageSender.sendMoveComplete (new Game($game), model);
end      

# Resolved CheckConstraints 

rule "resolve-check-constraint"
    agenda-group "evaluate"
    no-loop true
when
    $game   : ManantialesGame ()
    $move   : ManantialesMove (badYear == false, player.turn == true, type in
        (TokenType.MANAGED_FOREST, TokenType.VIVERO, TokenType.SILVOPASTORAL),
        status == MoveStatus.MOVED, $cell : destination)
    $constraint : CheckCondition ($violators : violators)
    GridCell ($cell.row == row, $cell.column == column) from $violators
then
    Set<CheckCondition> constraints = $game.getCheckConditions();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConditions (constraints) };
    MessageSender messageSender = new MessageSender();
    Condition condition = new Condition ($constraint);
    Move move = new Move ($move);
    messageSender.sendConditionResolved (new Game ($game), move, condition);    
       
end

rule "remove-replaced-token-from-player"
    agenda-group "evaluate"
    no-loop true
when
    $game  : GridGame (state == GameState.PLAY)
    $move : ManantialesMove (badYear == false, player.turn == true, 
        status == MoveStatus.MOVED, current != null, destination != null)
then
    ManantialesPlayer player = (ManantialesPlayer) $move.getPlayer();
    # remove ficha from count
    switch ($move.getReplacementType()) {
        case MANAGED_FOREST:
            player.setForested(player.getForested() -  1);
            break;
        case MODERATE_PASTURE:
            player.setModerate(player.getModerate() - 1);
            break;
        case INTENSIVE_PASTURE:
            player.setIntensive(player.getIntensive() - 1);
            break;
        case VIVERO:
            player.setVivero(player.getVivero() - 1);
            break;
        case SILVOPASTORAL:
            player.setSilvo(player.getSilvo() - 1);
            break;    
        default:
            break;
    }        
    modify ($move) { setPlayer (player) };
end

rule "reward-premium"
    agenda-group "evaluate"
    no-loop true
when      
    $move : ManantialesMove ($player : player, premium == false, player.turn == true,
        status == MoveStatus.MOVED, type in (TokenType.INTENSIVE_PASTURE, 
            TokenType.MANAGED_FOREST))
    $manPlayer : ManantialesPlayer (forested == 5 || intensive == 5) from $player
then
    if ($move.getType().equals(TokenType.INTENSIVE_PASTURE)) {
        $manPlayer.setIntensive(6);
    } else {
        $manPlayer.setForested(6);
    }
    modify ($move) { setPremium (true), setPlayer ($manPlayer) };
end


rule "score"
    agenda-group "evaluate"
    no-loop true
    salience -1    
when
    $game  : GridGame (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, status == MoveStatus.MOVED)
then
    ManantialesPlayer player = (ManantialesPlayer) $move.getPlayer();
    player.setScore(score (player, $move));
    modify ($move) { setPlayer (player), setStatus (MoveStatus.EVALUATED) };
end

# Expired CheckConstraints

#Triggers an end of game due to Manantial CheckCondition

rule "expire-condition"
    agenda-group "verify"
    no-loop true
when
    $game      : ManantialesGame ()
    $move      : ManantialesMove ($player : player)
    $condition : CheckCondition  (expired == false, $player2 : player, 
        type not in (ConditionType.MANANTIALES_DRY, 
            ConditionType.TERRITORY_DEFORESTED))
    eval (isPrecedingPlayer((GridPlayer) $player, $player2));  
then
    GameGrid grid = clearBorder ($game, $condition.getType());
    Set<CheckCondition> conditions = $game.getCheckConditions();
    conditions.remove ($condition);
    retract ($condition);
    modify ($game) { setCheckConditions (conditions), setGrid (grid) };
    Move model = new Move ($move);
    Condition condition = new Condition ($condition);
    MessageSender messageSender = new MessageSender();
    messageSender.sendConditionTriggered (new Game ($game), model, condition);    
end  

rule "expire-terminal-condition"
    agenda-group "verify"
    no-loop true
when
    $game      : ManantialesGame ()
    $move      : ManantialesMove ($player : player)
    $condition : CheckCondition  (expired == false, $player2 : player, 
        type in (ConditionType.MANANTIALES_DRY, 
            ConditionType.TERRITORY_DEFORESTED))
    eval (isPrecedingPlayer((GridPlayer) $player, $player2));  
then
    $condition.setExpired(true);
    modify ($game) {addCheckCondition ($condition), setState (GameState.END)}
    MessageSender messageSender = new MessageSender();
    Game game = new Game($game);
    Move move = new Move($move);
    Condition condition = new Condition ($condition);
    messageSender.sendConditionTriggered (new Game ($game), move, condition);
    messageSender.sendEndGame (game);
end 

rule "blue-borders-deforested"
    agenda-group "evaluate"
    no-loop true
    salience -5    
when
    $move : ManantialesMove ($player : player, player.turn == true, player.color == Color.BLUE,
        status == MoveStatus.EVALUATED)
    $constraint  : CheckCondition (expired == true, type in (
        ConditionType.NORTHERN_BORDER_DEFORESTED, ConditionType.WESTERN_BORDER_DEFORESTED))            
    $constraint1 : CheckCondition (type == ConditionType.NORTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckCondition (type == ConditionType.WESTERN_BORDER_DEFORESTED)        
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.BLUE);
    Set<CheckCondition> constraints = game.getCheckConditions();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConditions(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2);
    MessageSender messageSender = new MessageSender();
    Condition condition = new Condition ($constraint);
    Move move = new Move ($move);
    messageSender.sendConditionTriggered (new Game (game), move, condition);        
end

rule "yellow-borders-deforested"
    agenda-group "evaluate"
    no-loop true
    salience -5    
when
    $move : ManantialesMove ($player : player, player.turn == true, player.color == Color.YELLOW,
        status == MoveStatus.EVALUATED)
    $constraint  : CheckCondition (expired == true, type in (
        ConditionType.SOUTHERN_BORDER_DEFORESTED, ConditionType.WESTERN_BORDER_DEFORESTED))           
    $constraint1 : CheckCondition (type == ConditionType.SOUTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckCondition (type == ConditionType.WESTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.YELLOW);
    Set<CheckCondition> constraints = game.getCheckConditions();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConditions(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2);
    MessageSender messageSender = new MessageSender();
    Condition condition = new Condition ($constraint);
    Move move = new Move ($move);
    messageSender.sendConditionTriggered (new Game (game), move, condition);           
end

rule "black-borders-deforested"
    agenda-group "evaluate"
    no-loop true
    salience -5    
when
    $move : ManantialesMove ($player : player, player.turn == true, player.color == Color.BLACK,
        status == MoveStatus.EVALUATED, $game : player.game)
    $constraint  : CheckCondition (expired == true, type in (
        ConditionType.NORTHERN_BORDER_DEFORESTED, ConditionType.EASTERN_BORDER_DEFORESTED))             
    $constraint1 : CheckCondition (type == ConditionType.NORTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckCondition (type == ConditionType.EASTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.BLACK);
    Set<CheckCondition> constraints = game.getCheckConditions();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConditions(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2);
    MessageSender messageSender = new MessageSender();
    Condition condition = new Condition ($constraint);
    Move move = new Move ($move);
    messageSender.sendConditionTriggered (new Game (game), move, condition);        
end

rule "red-borders-deforested"
    agenda-group "evaluate"
    no-loop true
    salience -5    
when
    $move : ManantialesMove ($player : player, player.turn == true, player.color == Color.RED,
        status == MoveStatus.EVALUATED, $game : player.game)
    $constraint  : CheckCondition (expired == true, type in (
        ConditionType.SOUTHERN_BORDER_DEFORESTED, ConditionType.WESTERN_BORDER_DEFORESTED))          
    $constraint1 : CheckCondition (type == ConditionType.SOUTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckCondition (type == ConditionType.WESTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.RED);
    Set<CheckCondition> constraints = game.getCheckConditions();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConditions(constraints);
    game.setGrid (grid);    
    retract ($constraint1);
    retract ($constraint2);
    MessageSender messageSender = new MessageSender();
    Condition condition = new Condition ($constraint);
    Move move = new Move ($move);
    messageSender.sendConditionTriggered (new Game (game), move, condition);         
end 

# Determines if there is a winner 
# TODO:  need to query game, or move for winning score number (based on type
# of game.
rule "stage-won"
    agenda-group "evaluate"
    no-loop true
    salience -5
when
    $game  : ManantialesGame (state == GameState.PLAY, mode != Mode.SILVOPASTORAL)
    $move  : ManantialesMove ($player : player, player.turn == true, 
        status == MoveStatus.EVALUATED)
    eval (isWinner ($game.getMode(), (ManantialesPlayer) $player))
then
    List<GridPlayer> players = $game.getPlayers();
    for (GridPlayer p : players) {
        ManantialesPlayer player = (ManantialesPlayer) p;
        player.reset();                 
    }
    GameGrid grid = new GameGrid ();
    Mode mode = incrementMode($game.getMode());    
    modify ($game) { setGrid (grid), setPlayers (players), setMode (mode) } 
    MessageSender messageSender = new MessageSender();
    Game game = new Game ($game);
    messageSender.sendStateChange(game);
end

# Determines if there is a winner 
# TODO:  need to query game, or move for winning score number (based on type
# of game.
rule "game-won"
    agenda-group "evaluate"
    no-loop true
    salience -10
when
    $game  : ManantialesGame (state == GameState.PLAY, mode == Mode.SILVOPASTORAL)
    $move  : ManantialesMove ($player : player, player.turn == true, 
        status == MoveStatus.EVALUATED)
    eval (isWinner ($game.getMode(), (ManantialesPlayer) $player))
then
    modify ($game) { setState (GameState.END) };
    MessageSender messageSender = new MessageSender();
    Game game = new Game($game);
    messageSender.sendEndGame (game);
end

rule "increment-turn"
    agenda-group "evaluate"
    no-loop true
    salience -15
when
    $game  : GridGame (state == GameState.PLAY)
    move  : ManantialesMove (player.turn == true, status == MoveStatus.EVALUATED,
        badYear == false)
then
    GridPlayer player = incrementTurn (move);
    MessageSender messageSender = new MessageSender();
    Game game = new Game ($game);
    messageSender.sendPlayerChange(game);
end

rule "skip-turn"
    agenda-group "evaluate"
    no-loop true
    salience -15
when
    $game   : GridGame (state == GameState.PLAY)
    $move   : ManantialesMove (player.turn == true, badYear == true)
then
    GridPlayer player = incrementTurn ($move);
    MessageSender messageSender = new MessageSender();
    Game game = new Game ($game);
    messageSender.sendPlayerChange(game);
end