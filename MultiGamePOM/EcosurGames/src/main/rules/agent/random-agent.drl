/*
* Copyright (C) 2008, 2009 ECOSUR, Andrew Waterman
* 
* Licensed under the Academic Free License v. 3.0. 
* http://www.opensource.org/licenses/afl-3.0.php
*/

/**
 * This rule package creates a strategic, "Random" player.  The Random player
 * reads the board, looking for any open moves that fulfill the following
 * requirements:
 *
 *   a.  Can connect to another piece the same color as this player
 *   b.  Or can connect to another piece the same color as this player's partner.
 * A randomizer is used to choose from moves that satisfy the above requirements.
 * If no possible moves can be found, then the Random player will place a token
 * randomly, adjacent to a cell of the opposition's colors.
 *
 * @author awaterma@ecosur.mx
*/

package mx.ecosur.multigame.impl.entity.gente;

import mx.ecosur.multigame.enums.GameState;
import mx.ecosur.multigame.impl.model.GridCell;

import mx.ecosur.multigame.impl.Color;

import java.util.HashSet;
import java.util.TreeSet;
import java.util.Random;

#Yellow must move first, and that move can only be at the center of the board
rule "first-move"
when
    game   : GenteGame (state == GameState.PLAY, $grid : grid)
    player : GenteStrategyAgent (turn == true, color == Color.YELLOW, nextMove==null)
    eval ($grid.getCells().isEmpty())
then
    GenteMove centerMove = new GenteMove (player, new GridCell (
        game.getRows() / 2, game.getColumns () / 2, player.getColor()));
    modify (player) { setNextMove (centerMove) }
end

rule "random-move"
    no-loop true
when
    game   : GenteGame (state == GameState.PLAY, $grid : grid)
    player : GenteStrategyAgent (turn == true, nextMove == null)
    eval (!$grid.getCells().isEmpty())
then
    TreeSet<GenteMove> possible = player.determineAvailableMoves(game);
    if (possible.size() == 0) 
        possible = player.determineAvailableMoves (game, player.oppositionColors());
    GenteMove destination = null;
    Random random = new Random (System.currentTimeMillis());
    for (GenteMove move : possible) {
        if (random.nextBoolean()) { 
            destination = move; 
            break;
        }
    }
    if (destination == null)
        for (GenteMove move : possible) {
            destination = move;
            break;
         }
    modify (player) { setNextMove (destination) }
    System.out.println ("Setting destination: " + destination);
end

rule "log-move"
    no-loop true
    salience -10
when
    player : GenteStrategyAgent ()
then
    System.out.println("Random-agent.  nextMove = " + player.getNextMove());
end
