#created on: Feb 4, 2009
package mx.ecosur.multigame.manantiales

import mx.ecosur.multigame.GameState;
import mx.ecosur.multigame.MessageSender;

import mx.ecosur.multigame.Color;

import mx.ecosur.multigame.ejb.entity.Cell;
import mx.ecosur.multigame.ejb.entity.Game;
import mx.ecosur.multigame.ejb.entity.GamePlayer;
import mx.ecosur.multigame.ejb.entity.GameGrid;
import mx.ecosur.multigame.ejb.entity.Move;
import mx.ecosur.multigame.ejb.entity.Move.*;

import mx.ecosur.multigame.ejb.entity.manantiales.Ficha;

import mx.ecosur.multigame.ejb.entity.manantiales.ManantialesGame;
import mx.ecosur.multigame.ejb.entity.manantiales.ManantialesMove;
import mx.ecosur.multigame.ejb.entity.manantiales.ManantialesPlayer;

import mx.ecosur.multigame.manantiales.CheckConstraint;
import mx.ecosur.multigame.manantiales.CheckConstraintType;
import mx.ecosur.multigame.manantiales.Mode;
import mx.ecosur.multigame.manantiales.TokenType;

import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;


function boolean isValid (GameGrid grid, ManantialesMove move) {
    boolean ret = move.getDestination() != null;
    if (ret) {
	    Ficha destination = (Ficha) move.getDestination();
	    Ficha current = (Ficha) grid.getLocation (destination);
	    ret = ret && (current == null || !(current.getType() == TokenType.INTENSIVE_PASTURE));
	}
    if (!ret)
        move.setStatus (Status.INVALID);
    return ret;
}

function int score (ManantialesPlayer player, ManantialesMove move) {
    switch (move.getType()) {
        case MANAGED_FOREST:
            player.setForested(player.getForested() +  1);
            break;
        case MODERATE_PASTURE:
            player.setModerate(player.getModerate() + 1);
            break;
        case INTENSIVE_PASTURE:
            player.setIntensive(player.getIntensive() + 1);
            break;
        case VIVERO:
            player.setVivero(player.getVivero() + 1);
            break;
        case SILVOPASTORAL:
            player.setSilvo(player.getSilvo() + 1);
            break;    
        default:
            break;
    }
    
    /* Set the points */
    int forested = player.getForested() * 1;
    int moderate = player.getModerate() * 2;
    int intensive = player.getIntensive() * 3;
    int silvo = player.getSilvo() * 4;
    
    return forested + moderate + intensive + silvo;
}

function boolean isWinner (Mode mode, GamePlayer gamePlayer) {
    ManantialesPlayer player = (ManantialesPlayer) gamePlayer;
    return player.getScore() >= mode.getWinningScore();
}

function boolean isBorder (Cell cell) {
    return (cell.getColumn () == 4 || cell.getRow () == 4);       
}

function GamePlayer incrementTurn (Move move) {
    GamePlayer player = move.getPlayer();    
    player.setTurn(false);

    /* Find next player */
    List<GamePlayer> players = player.getGame().getPlayers();
    int playerNumber = players.indexOf(player);
    GamePlayer nextPlayer = null;
    if (playerNumber == players.size() - 1) {
        nextPlayer = players.get(0);
    } else {
        nextPlayer = players.get(playerNumber + 1);
    }
    
    nextPlayer.setTurn (true);
    return nextPlayer;
}

function GameGrid clearPlayer (ManantialesGame game, ManantialesPlayer player) {
    GameGrid grid = game.getGrid();
    
    for (Cell cell : game.getGrid().getCells()) {
        if (cell.getColor().equals(player.getColor())) 
            grid.removeCell(cell);
    }
    
    return grid;        
}

function GameGrid clearBorder (ManantialesGame game, CheckConstraintType violation) {
    GameGrid ret = game.getGrid();
    HashSet<Ficha> deletions = new HashSet<Ficha>();

    switch (violation) {
        case NORTHERN_BORDER_DEFORESTED:
            for (Cell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.NORTH))
                    deletions.add(ficha);
            }        
            break;
        case WESTERN_BORDER_DEFORESTED:
            for (Cell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.WEST))
                    deletions.add(ficha);
            }          
            break;
        case SOUTHERN_BORDER_DEFORESTED:
            for (Cell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.SOUTH))
                    deletions.add(ficha);
            }          
            break;
        case EASTERN_BORDER_DEFORESTED:
            for (Cell cell : ret.getCells()) {
                Ficha ficha = (Ficha) cell;
                if (ficha.getBorder().equals(BorderType.EAST))
                    deletions.add(ficha);
            }          
            break;
    }
    
    for (Ficha ficha : deletions) {
        ret.removeCell(ficha);
    }
    
    return ret;
}

function GameGrid clearTerritory (ManantialesGame game, Color color) {
    GameGrid ret = game.getGrid();
    HashSet<Ficha> deletions = new HashSet<Ficha>();
    
    for (Cell cell : ret.getCells()) {
        if (cell.getColor().equals(color)) {
            Ficha ficha = (Ficha) cell;
            if (ficha.getType().equals(TokenType.MANAGED_FOREST))
                continue;
            deletions.add(ficha);
        }
    }
    
    for (Ficha ficha : deletions) {
        ret.removeCell (ficha);
    }
    
    return ret;
}

# Sets the mode of the game, based upon its current state.
# TODO: Add in different available game modes (UI has not been
# implemented for PUZZLE modes nor RELOADED yet)le 
function Mode incrementMode (Mode mode) {
    if (mode == null) {
        mode = Mode.CLASSIC;
    } else {
	    switch (mode) {
	        case CLASSIC:
	            mode = Mode.SILVOPASTORAL;
	            break;	             
	    }
    }
    return mode;
}

#Sets the players in the game so that Black has the first turn
rule "setup"
    agenda-group "initialize"
    no-loop true
when
    $game : ManantialesGame (state == GameState.BEGIN);
then
    List<GamePlayer> players = $game.getPlayers();
    for (GamePlayer p : players) {
        if (p.getColor() == Color.YELLOW)
            p.setTurn(true);
        else
            p.setTurn(false);
    }
    GameGrid grid = new GameGrid ();
    Mode mode = incrementMode($game.getMode());
    modify ($game) { setGrid (grid), setState (GameState.PLAY), setPlayers (players), 
        setMode (mode) } 
    MessageSender messageSender = new MessageSender();
    messageSender.sendPlayerChange($game);
    messageSender.sendStartGame($game);
end  

rule "evaluate-move"
    agenda-group "verify"
when
    $game  : Game (state == GameState.PLAY, $grid : grid)
    $move  : ManantialesMove (badYear == false, status == Status.UNVERIFIED, player.turn == true)
    eval (isValid($game.getGrid(), $move))
then
    modify ($move) { setStatus (Status.VERIFIED) }    
end  

rule "silvopastoral-after-vivero" 
    agenda-group "verify"
when
    $game : Game (state == GameState.PLAY, $grid : grid)
    $move : ManantialesMove (badYear == false, status != Status.INVALID, status != Status.VERIFIED,
        type == TokenType.SILVOPASTORAL, replacementType != TokenType.VIVERO)
then
    modify ($move) { setStatus (Status.INVALID) }
end

rule "row contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != Status.INVALID, destination.row == $row, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (!isBorder($tok1)) or eval (!isBorder($move.getDestination()))           
        eval (Math.abs ($col - $move.getDestination().getColumn()) <= 2) 
    then 
        modify ($move) { setStatus (Status.INVALID) }
end

rule "column contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != Status.INVALID, destination.column == $col, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (!isBorder($tok1)) or eval (!isBorder($move.getDestination()))
        eval (Math.abs ($row - $move.getDestination().getRow()) <= 2) 
    then 
        modify ($move) { setStatus (Status.INVALID) }
end    

rule "border row contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != Status.INVALID, destination.row == $row, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (isBorder($move.getDestination())) and eval (isBorder($tok1))            
        eval (Math.abs ($col - $move.getDestination().getColumn()) == 1) 
    then 
        modify ($move) { setStatus (Status.INVALID) }
end

rule "border column contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($row : row, $col : column, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != Status.INVALID, destination.column == $col, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (isBorder($move.getDestination())) and eval (isBorder($tok1))
        eval (Math.abs ($row - $move.getDestination().getRow()) == 1) 
    then 
        modify ($move) { setStatus (Status.INVALID) }
end 

# Enforces the constraint (by diagonal) that intensives cannot be contiguous
rule "diagonal contiguous intensive"
    agenda-group "verify"
    no-loop true
    when
        $tok1 : Ficha ($col : column, $row : row, type == TokenType.INTENSIVE_PASTURE)
        $move : ManantialesMove (badYear == false, status != Status.INVALID, $destination : destination, 
            type == TokenType.INTENSIVE_PASTURE)
        eval (Math.abs($row - $destination.getRow()) == 1)
        eval (Math.abs($col - $destination.getColumn()) == 1) 
    then
        modify ($move) { setStatus (Status.INVALID) }
end 

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "northern border deforested"
    agenda-group "verify"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.NORTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))   
        $move : ManantialesMove (badYear == false, status != Status.INVALID, 
            destination.border == BorderType.NORTH, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))                            
    then
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.NORTHERN_BORDER_DEFORESTED, 
                $move.getPlayer(), $tok1, $tok2);
        # We should simply modify the Game object here, but this provokes an 
        # infinite loop. so we have to work around with the move object.
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "eastern border deforested"
    agenda-group "verify"    
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.EAST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.EAST,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))  
        $move : ManantialesMove (badYear == false, status != Status.INVALID, 
            destination.border == BorderType.EAST, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))       
    then
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.EASTERN_BORDER_DEFORESTED, $move.getPlayer(), 
            $tok1, $tok2);
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }               
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);                
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "southern border deforested"
    agenda-group "verify"
    no-loop true    
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.SOUTH, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.SOUTH,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $move : ManantialesMove (badYear == false, status != Status.INVALID, 
            destination.border == BorderType.SOUTH, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))     
    then
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.SOUTHERN_BORDER_DEFORESTED, $move.getPlayer(), 
            $tok1, $tok2);
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }                 
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);                       
end

#Enforces the arroyo constraint (only 2 developments that deforest on the border)
rule
    "western border deforested"
    agenda-group "verify"
    no-loop true    
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, border == BorderType.WEST, 
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, border == BorderType.WEST,
            type in (TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $move : ManantialesMove (badYear == false, status != Status.INVALID, 
            destination.border == BorderType.WEST, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))                              
    then
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.WESTERN_BORDER_DEFORESTED, $move.getPlayer(), 
                $tok1, $tok2);
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }             
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);                       
end

#Enforces Manantiales constraint (only 2 developments around the manantiales
#may deforest the land).
rule "manantiales"
    agenda-group "verify"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $tok1 : Ficha ($id : id, manantial == true, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $tok2 : Ficha (id > $id, $id2 : id, manantial == true, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE)) 
        $move : ManantialesMove (badYear == false, status != Status.INVALID, 
            destination.manantial == true, type in (
            TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))         
    then
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.MANANTIALES_DRY, $move.getPlayer(), $tok1, $tok2);
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        modify ($move) { setPlayer (player) }          
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);                   
end

#Enforces the constaint that no more than 32 sites can be deforested
rule "territory-deforested"
    agenda-group "evaluate"
    no-loop true
    when
        $game : ManantialesGame (state == GameState.PLAY)
        $move : ManantialesMove (player.turn == true, destination != null, 
            destination.type in (
                TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))
        $list : ArrayList (size > 30) from collect (
            Ficha (type in (
                TokenType.MODERATE_PASTURE, TokenType.INTENSIVE_PASTURE))) 
    then        
        Cell [] cells = (Cell []) $list.toArray(new Cell [ 0 ]);
        CheckConstraint constraint = new CheckConstraint(
            CheckConstraintType.TERRITORY_DEFORESTED, $move.getPlayer(), cells);
        $game.addCheckConstraint(constraint);
        GamePlayer player = $move.getPlayer();
        player.setGame($game);
        #modify ($move) { setPlayer (player) }                 
        MessageSender messageSender = new MessageSender ();
        messageSender.sendCheckConstraint ($move, constraint);                   
end

# Executes a simple move
rule "execute-move"
    agenda-group "move"
    no-loop true
when 
    $game  : Game (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, status == Status.VERIFIED)  
then
    #Modify gamegrid 
    GameGrid modifiedGrid = $game.getGrid();   
    modifiedGrid.updateCell ($move.getDestination());
    modify ($game) { setGrid (modifiedGrid) }
    modify ($move) { setStatus (Status.MOVED) }
    MessageSender messageSender = new MessageSender();
    messageSender.sendMoveComplete ($move);
end

#Expired CheckConstraints

#Triggers an end of game due to Manantial CheckConstraint 
rule "manantiales-dry-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (expired == false, player == $player, 
        reason == CheckConstraintType.MANANTIALES_DRY)
then
    $constraint.setExpired(true);
    modify ($game) {addCheckConstraint ($constraint), setState (GameState.END)}
    MessageSender messageSender = new MessageSender();
    messageSender.sendEndGame ($game);
end

#Triggers an end of game due to Territory Deforestation CheckConstraint
rule "territory-deforestation-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (expired == false, player == $player,  
        reason == CheckConstraintType.TERRITORY_DEFORESTED)
then
    $constraint.setExpired(true);
    modify ($game) { setState (GameState.END), addCheckConstraint ($constraint) }
    MessageSender messageSender = new MessageSender();
    messageSender.sendEndGame ($game);
end

#Clears the NORTHERN Border due to NORTHERN_BORDER_DEFORESTED CheckConstraint
rule "northern-border-deforested-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move       : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (reason == CheckConstraintType.NORTHERN_BORDER_DEFORESTED,
        player == $player)    
then
    GameGrid grid = clearBorder ($game, $constraint.getReason());
    #Check constraint is removed as consequences have occurred 
    HashSet<CheckConstraint> constraints = $game.getCheckConstraints();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConstraints (constraints), setGrid (grid) };
end

#Clears the SOUTHERN Border due to SOUTHERN_BORDER_DEFORESTED CheckConstraint
rule "southern-border-deforested-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move       : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (reason == CheckConstraintType.SOUTHERN_BORDER_DEFORESTED,
        player == $player)    
then
    GameGrid grid = clearBorder ($game, $constraint.getReason());
    #Check constraint is removed as consequences have occurred     
    HashSet<CheckConstraint> constraints = $game.getCheckConstraints();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConstraints (constraints), setGrid (grid) };
end

#Clears the WESTERN Border due to WESTERN_BORDER_DEFORESTED CheckConstraint
rule "western-border-deforested-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move       : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (reason == CheckConstraintType.WESTERN_BORDER_DEFORESTED,
        player == $player)    
then
    GameGrid grid = clearBorder ($game, $constraint.getReason());
    #Check constraint is removed as consequences have occurred 
    HashSet<CheckConstraint> constraints = $game.getCheckConstraints();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConstraints (constraints), setGrid (grid) };
end

#Clears the EASTERN Border due to EASTERN_BORDER_DEFORESTED CheckConstraint
rule "eastern-border-deforested-expired"
    agenda-group "evaluate"
    no-loop true
when
    $game  : ManantialesGame (state == GameState.PLAY)
    $move       : ManantialesMove (player.turn == true, $player : player, 
        status == Status.MOVED)
    $constraint : CheckConstraint (reason == CheckConstraintType.EASTERN_BORDER_DEFORESTED,
        player == $player)    
then
    GameGrid grid = clearBorder ($game, $constraint.getReason());
    #Check constraint is removed as consequences have occurred     
    HashSet<CheckConstraint> constraints = $game.getCheckConstraints();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConstraints (constraints), setGrid (grid) };
end

rule "blue-borders-deforested"
    agenda-group "evaluate"
    no-loop true
when
    $move : ManantialesMove (player.turn == true, player.color == Color.BLUE,
        status == Status.MOVED)
    $constraint1 : CheckConstraint (reason == CheckConstraintType.NORTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckConstraint (reason == CheckConstraintType.WESTERN_BORDER_DEFORESTED)        
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.BLUE);
    HashSet<CheckConstraint> constraints = game.getCheckConstraints();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConstraints(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2);
end

rule "yellow-borders-deforested"
    agenda-group "evaluate"
    no-loop true
when
    $move : ManantialesMove (player.turn == true, player.color == Color.YELLOW,
        status == Status.MOVED)
    $constraint1 : CheckConstraint (reason == CheckConstraintType.SOUTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckConstraint (reason == CheckConstraintType.WESTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.YELLOW);
    HashSet<CheckConstraint> constraints = game.getCheckConstraints();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConstraints(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2); 
end

rule "black-borders-deforested"
    agenda-group "evaluate"
    no-loop true
when
    $move : ManantialesMove (player.turn == true, player.color == Color.BLACK,
        status == Status.MOVED, $game : player.game)
    $constraint1 : CheckConstraint (reason == CheckConstraintType.NORTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckConstraint (reason == CheckConstraintType.EASTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.BLACK);
    HashSet<CheckConstraint> constraints = game.getCheckConstraints();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConstraints(constraints);
    game.setGrid (grid);
    retract ($constraint1);
    retract ($constraint2);
end

rule "red-borders-deforested"
    agenda-group "evaluate"
    no-loop true
when
    $move : ManantialesMove (player.turn == true, player.color == Color.RED,
        status == Status.MOVED, $game : player.game)
    $constraint1 : CheckConstraint (reason == CheckConstraintType.SOUTHERN_BORDER_DEFORESTED)
    $constraint2 : CheckConstraint (reason == CheckConstraintType.WESTERN_BORDER_DEFORESTED)
then
    ManantialesGame game = (ManantialesGame) $move.getPlayer().getGame();
    GameGrid grid = clearTerritory (game, Color.RED);
    HashSet<CheckConstraint> constraints = game.getCheckConstraints();
    constraints.remove ($constraint1);
    constraints.remove ($constraint2);
    game.setCheckConstraints(constraints);
    game.setGrid (grid);    
    retract ($constraint1);
    retract ($constraint2); 
end        


# Resolved CheckConstraints 

rule "resolve-check-constraint"
    agenda-group "evaluate"
    no-loop true
when
    $game   : ManantialesGame ()
    $move   : ManantialesMove (badYear == false, player.turn == true, type in
        (TokenType.MANAGED_FOREST, TokenType.VIVERO, TokenType.SILVOPASTORAL),
        status == Status.MOVED, $cell : destination)
    $constraint : CheckConstraint ($violators : violators)
    Cell ($cell.row == row, $cell.column == column) from $violators
then
    HashSet<CheckConstraint> constraints = $game.getCheckConstraints();
    constraints.remove ($constraint);
    retract ($constraint);
    modify ($game) { setCheckConstraints (constraints) };
end

rule "remove-replaced-token-from-player"
    agenda-group "evaluate"
    no-loop true
when
    $game  : Game (state == GameState.PLAY)
    $move : ManantialesMove (current != null, player.turn == true, 
        status == Status.MOVED)
then
    ManantialesPlayer player = (ManantialesPlayer) $move.getPlayer();
    switch ($move.getType()) {
        case MANAGED_FOREST:
            player.setForested(player.getForested() -  1);
            break;
        case MODERATE_PASTURE:
            player.setModerate(player.getModerate() - 1);
            break;
        case INTENSIVE_PASTURE:
            player.setIntensive(player.getIntensive() - 1);
            break;
        case VIVERO:
            player.setVivero(player.getVivero() - 1);
            break;
        case SILVOPASTORAL:
            player.setSilvo(player.getSilvo() - 1);
            break;    
        default:
            break;
    }
    modify ($move) { setPlayer (player) };
end

rule "reward-premium"
    agenda-group "evaluate"
    no-loop true
when      
    $move : ManantialesMove ($player : player, premium == false, player.turn == true,
        status == Status.MOVED, type in (TokenType.INTENSIVE_PASTURE, 
            TokenType.MANAGED_FOREST))
    $manPlayer : ManantialesPlayer (forested == 5 || intensive == 5) from $player
then
    if ($move.getType().equals(TokenType.INTENSIVE_PASTURE)) {
        $manPlayer.setIntensive(6);
    } else {
        $manPlayer.setForested(6);
    }
    modify ($move) { setPremium (true), setPlayer ($manPlayer) };
end


rule "score"
    agenda-group "evaluate"
    no-loop true
    salience -5
when
    $game  : Game (state == GameState.PLAY)
    $move  : ManantialesMove (player.turn == true, status == Status.MOVED)
then
    ManantialesPlayer player = (ManantialesPlayer) $move.getPlayer();
    player.setScore(score (player, $move));
    modify ($move) { setPlayer (player), setStatus (Status.EVALUATED) };
end

# Determines if there is a winner 
# TODO:  need to query game, or move for winning score number (based on type
# of game.
rule "stage-won"
    agenda-group "evaluate"
    no-loop true
    salience -10
when
    $game  : ManantialesGame (state == GameState.PLAY, mode != Mode.SILVOPASTORAL)
    $move  : ManantialesMove ($player : player, player.turn == true, 
        status == Status.EVALUATED)
    eval (isWinner ($game.getMode(), $player))
then
    List<GamePlayer> players = $game.getPlayers();
    for (GamePlayer p : players) {
        if (p.getColor() == Color.YELLOW)
            p.setTurn(true);
        else
            p.setTurn(false);
    }
    GameGrid grid = new GameGrid ();
    Mode mode = incrementMode($game.getMode());
    modify ($game) { setGrid (grid), setState (GameState.PLAY), setPlayers (players), 
        setMode (mode) } 
    MessageSender messageSender = new MessageSender();
    messageSender.sendPlayerChange($game);
    messageSender.sendStateChange($game);
end

# Determines if there is a winner 
# TODO:  need to query game, or move for winning score number (based on type
# of game.
rule "game-won"
    agenda-group "evaluate"
    no-loop true
    salience -10
when
    $game  : ManantialesGame (state == GameState.PLAY, mode == Mode.SILVOPASTORAL)
    $move  : ManantialesMove ($player : player, player.turn == true, 
        status == Status.EVALUATED)
    eval (isWinner ($game.getMode(), $player))
then
    modify ($game) { setState (GameState.END) };
    MessageSender messageSender = new MessageSender();
    messageSender.sendEndGame ($game);
end

rule "increment-turn"
    agenda-group "evaluate"
    no-loop true
    salience -15
when
    game  : Game (state == GameState.PLAY)
    move  : ManantialesMove (player.turn == true, status == Status.EVALUATED,
        badYear == false)
then
    GamePlayer player = incrementTurn (move);
    MessageSender messageSender = new MessageSender();
    messageSender.sendPlayerChange(player.getGame());
end

rule "skip-turn"
    agenda-group "evaluate"
    no-loop true
    salience -15
when
    $game   : Game (state == GameState.PLAY)
    $move   : ManantialesMove (player.turn == true, badYear == true)
then
    GamePlayer player = incrementTurn ($move);
    MessageSender messageSender = new MessageSender();
    messageSender.sendPlayerChange(player.getGame());
end  